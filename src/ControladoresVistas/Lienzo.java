/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ControladoresVistas;

import Modelos.Circulo;
import Modelos.Cuadrado;
import Modelos.FiguraEstandar;
import Modelos.FiguraGeometrica;
import Modelos.Imagen;
import Modelos.Poligono;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Toolkit;
import java.util.LinkedList;

/**
 *
 * @author pipet
 */
public class Lienzo extends javax.swing.JPanel implements Runnable{

    private LinkedList<FiguraGeometrica> misFiguras;
    private boolean isPlaying;
    
    /**
     * Creates new form Lienzo
     */
    public Lienzo() {
        initComponents();
        this.misFiguras = new LinkedList<>();
        this.isPlaying=false;
    }
    public void dibujarCuadrado(Graphics lapiz,Cuadrado cuadradoActual){
        if (cuadradoActual.getBorde()!=null) {
            lapiz.setColor(cuadradoActual.getBorde());
        }
        lapiz.drawRect(cuadradoActual.getX(),cuadradoActual.getY(),
                       cuadradoActual.getLado(), cuadradoActual.getLado());
        if (cuadradoActual.getColorRelleno()!=null) {
            lapiz.setColor(cuadradoActual.getColorRelleno());
        }
        lapiz.fillRect(cuadradoActual.getX(),cuadradoActual.getY(),
                       cuadradoActual.getLado(), cuadradoActual.getLado());
    }
    
    public void dibujarCirculo(Graphics lapiz,Circulo circuloActual){
        if (circuloActual.getBorde()!=null) {
            lapiz.setColor(circuloActual.getBorde());
        }
        lapiz.drawOval(circuloActual.getX(), circuloActual.getY(),
                       circuloActual.getRadio(), circuloActual.getRadio());
        if (circuloActual.getColorRelleno()!=null) {
            lapiz.setColor(circuloActual.getColorRelleno());
        }
        lapiz.fillOval(circuloActual.getX(), circuloActual.getY(),
                       circuloActual.getRadio(), circuloActual.getRadio());
    }
    public void dibujarImagen(Graphics lapiz,Imagen imagenActual){
        Toolkit t = Toolkit.getDefaultToolkit();
        Image imagen = t.getImage(imagenActual.getRuta());
        lapiz.drawImage(imagen,imagenActual.getX(),imagenActual.getY(),
                               imagenActual.getAncho(),imagenActual.getAlto(),this);
    }
    public void dibujarPoligono(Graphics lapiz,Poligono poligonoActual){
        if (poligonoActual.getBorde()!=null) {
            lapiz.setColor(poligonoActual.getBorde());
        }
        
        lapiz.drawPolygon(poligonoActual.getX(),
                          poligonoActual.getY(),
                          poligonoActual.getX().length);
        
        if (poligonoActual.getColorRelleno()!=null) {
            lapiz.setColor(poligonoActual.getColorRelleno());
        }
         lapiz.fillPolygon(poligonoActual.getX(),
                          poligonoActual.getY(),
                          poligonoActual.getX().length);

    }
    @Override
    public void paintComponent(Graphics lapiz) {
        super.paintComponent(lapiz);
        for(FiguraGeometrica actual:this.getMisFiguras()){
            if (actual instanceof Cuadrado) {
                dibujarCuadrado(lapiz,(Cuadrado) actual);
            }else if (actual instanceof Circulo) {
                dibujarCirculo(lapiz, (Circulo)actual);
            }else if (actual instanceof Imagen) {
                dibujarImagen(lapiz, (Imagen)actual);
            }else if (actual instanceof Poligono) {
                dibujarPoligono(lapiz,(Poligono) actual);
            }
        }
//        g.drawRect(10, 10, 50, 50);
//        g.setColor(Color.blue);
//        g.fillRect(10, 10, 30, 30);
//        g.setColor(Color.black);
//        g.drawOval(100, 10, 100, 100);
//
//        Toolkit t = Toolkit.getDefaultToolkit();
//        Image imagen = t.getImage("src/Imagenes/hongo.png");
//        g.drawImage(imagen,150,200,50,50,this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @return the misFiguras
     */
    public LinkedList<FiguraGeometrica> getMisFiguras() {
        return misFiguras;
    }

    /**
     * @param misFiguras the misFiguras to set
     */
    public void setMisFiguras(LinkedList<FiguraGeometrica> misFiguras) {
        this.misFiguras = misFiguras;
    }

    @Override
    public void run() {
        while(this.isPlaying){
            this.mover();
            repaint();
            esperar(300);
        }
        System.out.println("fin proceso");
    }
    private void esperar(int milisegundos) {
        try {
            Thread.sleep(milisegundos);
        } catch (InterruptedException ex) {
            Thread.currentThread().interrupt();
        }
    }
    public void mover(){
        for (FiguraGeometrica actual:this.misFiguras) {
            if (actual instanceof FiguraEstandar) {
                if (actual.getDireccion()==1 &&
                    ((FiguraEstandar) actual).getY()>0) {
                    ((FiguraEstandar) actual).moverAR(10);
                }else if (actual.getDireccion()==3 &&
                        ((FiguraEstandar) actual).getX()<this.getWidth()-10) {
                    ((FiguraEstandar) actual).moverDE(10);
                }else if (actual.getDireccion()==5 && 
                        ((FiguraEstandar) actual).getY()<this.getHeight()-10) {
                    ((FiguraEstandar) actual).moverAB(10);
                }else if (actual.getDireccion()==7 &&
                        ((FiguraEstandar) actual).getX()>0) {
                    ((FiguraEstandar) actual).moverIZ(10);
                }
                
            }
        }
    }

    /**
     * @return the isPlaying
     */
    public boolean getIsPlaying() {
        return isPlaying;
    }

    /**
     * @param isPlaying the isPlaying to set
     */
    public void setIsPlaying(boolean isPlaying) {
        this.isPlaying = isPlaying;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
